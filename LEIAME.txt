Aluno:
MARCELO GYOVANI PEREIRA		GRR20221225

Todos os arquivos de código-fonte estão no diretório src. O diretório build serve 
apenas para guardar arquivos de objeto para compilação.

O código-fonte dos testes está no arquivo main.c, enquanto a API está implementada
no arquivo memalloc.s. O código Assembly é montado utilizando o GCC e ligado ao
código principal também com o uso do GCC.

Os testes foram feitos de forma que ao ocorrerem sem problemas, seja impresso a 
palavra "Correto", e "Errado" caso contrário. Dessa forma, é possível rodar o comando
"./main | grep Errado -b10 -a10" para verificar o que é impresso na região dos erros.
Também há um script em bash (test,sh) para verificar se houve algum erro durante a
execução, mas sem detalhes.

O alocador foi desenvolvido em Assembly paralelamente ao código de teste, que foi
desenvolvido em C, que foi a principal forma de debug do código e funcionou bem
até certo problema. Para a compilação do programa, foi utilizado a flag -no-pie,
para impedir o compilador de tentar gerar um arquivo independente de posição ao
montar o memalloc.s, já que esse utiliza a seção data. Para a utilização da 
biblioteca, é necessário chamar a função setup_brk antes de qualquer alocação,
mas somente depois da chamada de alguma função que utilize outro alocador,
como o da libc.

Na seção data existem duas variáveis globais para o gerenciamento da heap, heap_start
que aponta para o início da heap/brk inicial, e brkv que contém o valor atual de brk.
brk é acessível no código main.c apenas para fins de testes e sofre apenas leitura.

O principal problema encontrado durante o desenvolvimento da API foi um problema com
a função printf, resolvido com o auxílio do professor. A função printf utiliza buffer(s)
alocado(s) dinamicamente, porém essas alocações são realizadas utilizando a função malloc
da libc, que gera um conflito entre os alocadores. Esse problema foi especialmente
difícil de encontrar devido ao uso da própria função printf para debugar o código,
já que a função modificava metadados do alocador memalloc antes de imprimir.
Além disso, o código funcionava perfeitamente ao rodar utilizando o programa valgrind,
e quando sem o uso do valgrind, executava sem problemas até uma quantidade de bytes
alocados muito específica. Portanto, o uso do GDB era essencial para a resolução
do problema.

Dessa forma, para resolver o problema, há duas alternativas:
1. Chamar a função printf antes da função setup_brk: Sendo assim, todas as alocações
realizadas pelo memalloc estará em uma região de memória posterior a região de alocação
do malloc.
2. Definir a função malloc dentro do main.c, tornando-a apenas um wrapper para a função
memory_alloc: Essa solução é mais adequada, já que evita completamente o uso de dois 
alocadores simultaneamente.

Dentre as soluções, a medida escolhida foi a primeira por causa de um teste envolvendo
a função dismiss_brk, que reinicia o brk para o seu valor inicial, o que causaria um
segmentation fault ao chamar a função printf posteriormente para verificar se tudo
ocorreu sem problemas.

Por fim, para a função memory_free, foram implementados alguns códigos de erro:
0 - Sucesso
1 - Não está na heap
2 - Está na heap, mas não aponta para o início de um bloco (disponibilidade do Bloco
não possui valor booleano => não é um bloco ou os dados do gerenciador foram sobrescritos)
3 - Bloco já foi liberado
